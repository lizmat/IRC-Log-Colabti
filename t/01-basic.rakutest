use Test;
use IRC::Log::Colabti;

my $filename = '2021-04-22';
my $date     = $filename.Date;
my $pos      = -1;

my $path     = $?FILE.IO.sibling: $filename;
my $log      = IRC::Log::Colabti.new: $path;
my @entries    = $log.entries;
my $nr-entries = +@entries;

sub test-common(
  $entry, $class, $hour, $minute, $ordinal, $nick, $control, $conversation,
  $comment,
) {
    subtest $comment => {
        plan 13;

        isa-ok $entry, IRC::Log::Colabti::{$class};
        is $entry.date,     $date,    "is .date correct: $date";
        is $entry.hour,     $hour,    "is .hour correct: $hour";
        is $entry.minute,   $minute,  "is .minute correct: $minute";
        is $entry.ordinal,  $ordinal, "is .ordinal correct: $ordinal";
        is $entry.nick,     $nick,    "is .nick correct: $nick";
        is $entry.pos,      ++$pos,   "is .pos correct: $pos";

        is-deeply $entry.control, $control,
          "is .control ok: $control";
        is-deeply $entry.conversation, $conversation,
          "is .conversation ok: $conversation";

        is +$entry.entries, $nr-entries,
          'is nr-entries correct';
        is $entry.hhmm, sprintf('%02d%02d',$hour,$minute),
          'is .hhmm correct';
        is $entry.seen-at, sprintf('[%02d:%02d]',$hour,$minute),
          'is .seen-at correct';
        is $entry.target, (
          $ordinal
            ?? sprintf("$date:%02s%02d-%04d",$hour,$minute,$ordinal)
            !! sprintf("$date:%02s%02d",$hour,$minute)
        ), 'is .target correct';
    }
}

plan 27 + @entries;

is-deeply IRC::Log::Colabti.IO2Date($path), $date,
  'was the date elided correctly';

isa-ok $log, IRC::Log::Colabti;
is-deeply $log.date, $date, 'is the date correct';
is +$log.problems, 0, 'did we see any problems';

is $log.first-target, "2021-04-22:0536", 'is first target ok';
is $log.last-target,  "2021-04-22:2350", 'is last target ok';

my $entry = @entries.shift;
test-common $entry, 'Joined', 5, 36, 0, 'MasterDuke', True, False,
  'test joining';

$entry = @entries.shift;
test-common $entry, 'Message', 8, 1, 0, 'MasterDuke', False, True,
  'test message';
is $entry.text, 'any objections to merging ?',
  'is text ok in the message';

$entry = @entries.shift;
test-common $entry, 'Self-Reference', 8, 1, 1, 'sena_kun', False, True,
  'test message';
is $entry.text, 'still awaits the release blocker',
  'is text ok in the self-reference';

$entry = @entries.shift;
test-common $entry, 'Nick', 9, 35, 0, 'lizmmat_', True, False,
  'test nick change';
is $entry.new-nick, 'lizmat',
  'is new nick ok';

$entry = @entries.shift;
test-common $entry, 'Left', 11, 31, 0, 'nine', True, False,
  'test leaving';

$entry = @entries.shift;
test-common $entry, 'Mode', 22, 47, 0, 'ChanServ', True, False,
  'test mode';
is $entry.flags, '+o',
  'are the flags ok';
is-deeply $entry.nicks, Array[Str].new('tyil'),
  'are the nicks ok';

$entry = @entries.shift;
test-common $entry, 'Topic', 23, 48, 0, 'lizmat', True, True,
  'test topic';
is $entry.text, 'Perl Sucks!',
  'is the text ok';

$entry = @entries.shift;
test-common $entry, 'Kick', 23, 50, 0, 'tyil', True, False,
  'test kick';
is $entry.kickee, 'lizmat',
  'is the kickee ok';
is-deeply $entry.spec, '(lizmat))',
  'is the spec ok';

is +@entries, 0, 'did we see all the entries';

my %nicks := $log.nicks;
is %nicks.elems, 7, 'did we see 7 nicks';
subtest 'test all known nicks' => {
    plan 7;
    for <ChanServ lizmat lizmmat_ nine sena_kun tyil> -> $nick {
        is +%nicks{$nick}, 1, "did we see $nick once";
    }
    is +%nicks<MasterDuke>, 2, "did we see MasterDuke twice";
}

my $slurped = IRC::Log::Colabti.new: $path.slurp, $date;
isa-ok $slurped, IRC::Log::Colabti;
is +$slurped.entries, $nr-entries, 'did we get the correct number of entries';
is-deeply $slurped.date, $date, 'is the date correct again';
is +$slurped.problems, 0, 'did we see any problems';

$log.update($?FILE.IO.sibling: $filename ~ '-with-additions');
is +$log.entries, $nr-entries + 2, 'did we get 2 extra enties';
@entries = $log.entries.skip($nr-entries);
$nr-entries += 2;

$entry = @entries.shift;
test-common $entry, 'Joined', 23, 53, 0, 'lizmat', True, False,
  'test joining extra entry';

$entry = @entries.shift;
test-common $entry, 'Message', 23, 53, 1, 'lizmat', False, True,
  'test message extra entry';
is $entry.text, 'Thank you, I needed that :-)',
  'is text ok in the message of extra entry';

%nicks := $log.nicks;
is %nicks.elems, 7, 'did we see 7 nicks again';
subtest 'test all known nicks' => {
    plan 7;
    for <ChanServ lizmmat_ nine sena_kun tyil> -> $nick {
        is +%nicks{$nick}, 1, "did we see $nick once again";
    }
    is +%nicks<MasterDuke>, 2, "did we see MasterDuke twice again";
    is +%nicks<lizmat>, 3, "did we see lizmat thrice";
}

# vim: expandtab shiftwidth=4
